from docx import Document
import json
from typing import List, Dict
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.oxml import OxmlElement

path= r"D:\OneDrive - Wipro\Desktop\Trainng-Perl_Python\Python_Codes\LLM_USE Cases\\"


def add_horizontal_line(paragraph):
    p = paragraph._p
    pPr = p.get_or_add_pPr()
    pBdr = OxmlElement('w:pBdr')
    pBdr.set(qn('w:val'), 'single')
    pBdr.set(qn('w:sz'), '4')
    pBdr.set(qn('w:space'), '1')
    pBdr.set(qn('w:color'), '000000')
    pPr.append(pBdr)



def generate_formatted_resume(parsed_result): # type: ignore
    try:
        
        # Create a new Document
        doc = Document()

        # Parse the JSON data
        data = parsed_result
        data = json.loads(parsed_result)

        
        # Add name
        title = doc.add_heading(data['Name'], level=1)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER

        #Adding Line as Seperator   
        add_horizontal_line(doc.add_paragraph())

        # Iterate through the JSON data and add it to the document
        for key, value in data.items():
            doc.add_heading(key, level=2)
            if isinstance(value, dict):
                for sub_key, sub_value in value.items():
                    doc.add_paragraph(f"{sub_key}: {sub_value}")
            elif isinstance(value, list):
                for item in value:
                    doc.add_paragraph(str(item),style='ListBullet')
            else:
                doc.add_paragraph(str(value))
        
        footer = doc.sections[0].footer
        footer.add_paragraph("Generated by ResuMatic")

        # Save the document
        doc.save(path+f'Structured_Resume-{data['Name']}.docx')
    except Exception as e:
        print(f"An error occurred while generating the resume: {e}")



        # # Add contact information
        # doc.add_paragraph(f"Email: {parsed_result['email']}")
        # doc.add_paragraph(f"Phone: {parsed_result['phone']}")

        # # Add summary
        # doc.add_heading("Summary", level=2)
        # doc.add_paragraph(parsed_result['summary'])

        # # Add skills
        # doc.add_heading("Skills", level=2)
        # skills = "\n".join(parsed_result['skills'])
        # doc.add_paragraph(skills)

        # # Add experience
        # doc.add_heading("Experience", level=2)
        # for exp in parsed_result['experience']:
        #     doc.add_paragraph(exp)

        # # Add education
        # doc.add_heading("Education", level=2)
        # for edu in parsed_result['education']:
        #     doc.add_paragraph(edu)